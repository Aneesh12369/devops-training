pipeline {
    
    agent any
    
    options {
        disableConcurrentBuilds()
    }
    
    stages {
        
        stage('Build') {
        	steps {
	            sh 'mvn -f spring-boot-demo/pom.xml clean install -DskipTests'
	        }   
        }
        
        stage('Unin Tests') {
        	steps {
	            sh 'mvn -f spring-boot-demo/pom.xml clean install'
	        }   
        }
        
        stage('Sonar Scan') {
        	steps{
            		def scannerHome = tool 'sonar-scanner';
    				withSonarQubeEnv {
      					sh "${scannerHome}/bin/sonar-scanner"    
        			}
            
        	}
        	
        	steps{
        		timeout(time: 5, unit: 'MINUTES') { 
    				waitForQualityGate abortPipeline: true
  				}
			}

    	
    	}
    	
    	stage('Build Docker Image') {
    		steps{
				println "Building image"
			}
    	
    	}
    	
    	stage('Publish to DockerHub') {
			steps{	
				println "Pushing Image to Docker Hub"
			}
    	
    	}
    	
    	stage('Deploy') {
    		steps{
    	    	println "Deploying.."
    		}
    	
    	}
    	
    	
    }
}