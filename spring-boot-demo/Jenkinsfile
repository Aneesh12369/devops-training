pipeline {
    
    agent any
    
    options {
        disableConcurrentBuilds()
    }
    
    stages {
        
        stage('Build') {
        	steps {
	            sh 'mvn -q -f spring-boot-demo/pom.xml clean install -DskipTests'
	        }   
        }
        
        stage('Unin Tests') {
        	steps {
	            sh 'mvn -f spring-boot-demo/pom.xml clean install'
	        }   
        }
        
        stage('Sonar Scan') {
	        	 environment {
				    SCANNER_HOME = tool 'sonar-scanner'
  				 }
			      steps {
			        withSonarQubeEnv('sonar-server') {
			          sh "${SCANNER_HOME}/bin/sonar-scanner -Dproject.settings=spring-boot-demo/sonar-project.properties"
			        }
			        
			       
			     }
    	}
    	
    	stage('Quality Gate') {
			      steps {
			        timeout(time: 5, unit: 'MINUTES') { 
    				  waitForQualityGate abortPipeline: true
  					}
			     }
    	}
    	
    	stage('Build Docker Image') {
    		steps{
    		
				buildImage()
				
			}
    	
    	}
    	
    	stage('Publish to DockerHub') {
			steps{	
				println "Pushing Image to Docker Hub"
			}
    	
    	}
    	
    	stage('Deploy') {
    		steps{
    	    	deploy()
    		}
    	
    	}
    	
    	
    }
}


def buildImage(){
	println "Building image"
	dir('spring-boot-demo'){
	   def appImage = docker.build("devops-practice/spring-boot-demo:${BUILD_NUMBER}") 
	}

        
}


def deploy(){

	println "Deploying.."

    def containerName = 'spring-boot-demo';
    def port = '9999';

  

    sh "docker ps -q -f name=${containerName} | xargs --no-run-if-empty docker stop"
    sh "docker ps -aq -f name=${containerName} | xargs -r docker rm"
    sh "docker run -d -p ${port}:5000 --name ${containerName} devops-practice/spring-boot-demo:${BUILD_NUMBER}"

}
